/*
 * Terminal API
 * Terminal is a unified API that makes it easy to integrate with the leading telematics service providers.  Contact Support:  Name: Terminal  Email: connect@withterminal.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HoursOfServiceApi
 */
@Disabled
public class HoursOfServiceApiTest {

    private static HoursOfServiceApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new HoursOfServiceApi(apiClient);
    }

    /**
     * Available Time for Drivers
     *
     * List available time for the driver. This endpoint provides live access to the driver&#39;s available time. Different than most endpoints, this endpoint calls the provider&#39;s API in real time to get the latest available time for the driver. This endpoint is useful for building real time applications that need to know the driver&#39;s available time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableTimeTest() throws ApiException {
        String cursor = null;
        String limit = null;
        String driverIds = null;
        String expand = null;
        String raw = null;
        String connectionToken = null;
        api.getAvailableTime()
                .cursor(cursor)
                .limit(limit)
                .driverIds(driverIds)
                .expand(expand)
                .raw(raw)
                .connectionToken(connectionToken)
                .execute();
        // TODO: test validations
    }

    /**
     * List HOS Daily Logs
     *
     * List daily summary of hours of service. Each daily log represents the time a driver spent in each duty status for a given day.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDailyLogsTest() throws ApiException {
        String cursor = null;
        String limit = null;
        String startDate = null;
        String endDate = null;
        String modifiedAfter = null;
        String modifiedBefore = null;
        String driverIds = null;
        String raw = null;
        String expand = null;
        String connectionToken = null;
        api.getDailyLogs()
                .cursor(cursor)
                .limit(limit)
                .startDate(startDate)
                .endDate(endDate)
                .modifiedAfter(modifiedAfter)
                .modifiedBefore(modifiedBefore)
                .driverIds(driverIds)
                .raw(raw)
                .expand(expand)
                .connectionToken(connectionToken)
                .execute();
        // TODO: test validations
    }

    /**
     * List HOS Logs
     *
     * List all hours of service logs. Currently, HOS logs are tracked as the distinct changes in duty status. In the future we will be offering endpoints to expose current HOS status and historical daily summaries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listHosLogsTest() throws ApiException {
        String cursor = null;
        String limit = null;
        String startedAfter = null;
        String startedBefore = null;
        String modifiedAfter = null;
        String modifiedBefore = null;
        String driverIds = null;
        String expand = null;
        String raw = null;
        String connectionToken = null;
        api.listHosLogs()
                .cursor(cursor)
                .limit(limit)
                .startedAfter(startedAfter)
                .startedBefore(startedBefore)
                .modifiedAfter(modifiedAfter)
                .modifiedBefore(modifiedBefore)
                .driverIds(driverIds)
                .expand(expand)
                .raw(raw)
                .connectionToken(connectionToken)
                .execute();
        // TODO: test validations
    }

}
