/*
 * Terminal API
 * Terminal is a unified API that makes it easy to integrate with the leading telematics service providers.  Contact Support:  Name: Terminal  Email: connect@withterminal.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.DataManagementMakePassthroughRequestRequest;
import com.konfigthis.client.model.DataManagementRequestSyncManualRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataManagementApi
 */
@Disabled
public class DataManagementApiTest {

    private static DataManagementApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new DataManagementApi(apiClient);
    }

    /**
     * Get Sync Job Status
     *
     * Get the status of a sync job by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSyncStatusTest() throws ApiException {
        String id = null;
        String expand = null;
        String connectionToken = null;
        api.getSyncStatus(id)
                .expand(expand)
                .connectionToken(connectionToken)
                .execute();
        // TODO: test validations
    }

    /**
     * List Sync History
     *
     * List a log of all batch sync jobs for the current connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSyncHistoryTest() throws ApiException {
        String limit = null;
        String cursor = null;
        String status = null;
        String expand = null;
        String connectionToken = null;
        api.listSyncHistory()
                .limit(limit)
                .cursor(cursor)
                .status(status)
                .expand(expand)
                .connectionToken(connectionToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Passthrough
     *
     * Make an authenticated request to the underlying telematics provider.   This endpoint helps ensure that you are never limited by Terminal. You can use passthrough requests to access capabilities that may be limited to a specific TSP or not yet in the normalized model.  Our team is here an ready to support custom use cases that may need &#x60;/passthrough&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void makePassthroughRequestTest() throws ApiException {
        String body = null;
        Object headers = null;
        String method = null;
        String path = null;
        String connectionToken = null;
        api.makePassthroughRequest()
                .body(body)
                .headers(headers)
                .method(method)
                .path(path)
                .connectionToken(connectionToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Request Sync
     *
     * Manually request to sync the current connections data.  By default, Terminal will sync all connections where &#x60;syncMode &#x3D; automatic&#x60; on a regular cadence. For customers that may not need a fleet&#39;s data to be kept up to date and want to reduce their active tracked trucks, you can set &#x60;syncMode &#x3D; manual&#x60; and invoke this endpoint when you want to sync data.  If you&#39;re wondering if this is relevent to your use case then feel free to reach out and we&#39;d be happy to assist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestSyncManualTest() throws ApiException {
        Double days = null;
        String connectionToken = null;
        api.requestSyncManual()
                .days(days)
                .connectionToken(connectionToken)
                .execute();
        // TODO: test validations
    }

}
