/*
 * Terminal API
 * Terminal is a unified API that makes it easy to integrate with the leading telematics service providers.  Contact Support:  Name: Terminal  Email: connect@withterminal.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ConnectionsCreateCustomConnectionRequest;
import com.konfigthis.client.model.ConnectionsCreateCustomConnectionRequestBackfill;
import com.konfigthis.client.model.ConnectionsCreateCustomConnectionRequestCompany;
import com.konfigthis.client.model.ConnectionsCreateCustomConnectionRequestCredentials;
import com.konfigthis.client.model.ConnectionsUpdateCurrentConnectionDetailsRequest;
import com.konfigthis.client.model.ConnectionsUpdateCurrentConnectionDetailsRequestCompany;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConnectionsApi
 */
@Disabled
public class ConnectionsApiTest {

    private static ConnectionsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ConnectionsApi(apiClient);
    }

    /**
     * Create Connection
     *
     * Create a new connection via API. This endpoint can be used to provide a completely custom connection creation experience for your customers.  For most use cases we recommend using the [Link UI](./rhuaxk9205cn8-link-component) to create connections.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomConnectionTest() throws ApiException {
        List<String> tags = null;
        ConnectionsCreateCustomConnectionRequestBackfill backfill = null;
        ConnectionsCreateCustomConnectionRequestCompany company = null;
        ConnectionsCreateCustomConnectionRequestCredentials credentials = null;
        String externalId = null;
        String provider = null;
        String syncMode = null;
        api.createCustomConnection()
                .tags(tags)
                .backfill(backfill)
                .company(company)
                .credentials(credentials)
                .externalId(externalId)
                .provider(provider)
                .syncMode(syncMode)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Current Connection
     *
     * Get the details of the current active connection. The current connection is derived from the provided connection token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentDetailsTest() throws ApiException {
        String connectionToken = null;
        api.getCurrentDetails()
                .connectionToken(connectionToken)
                .execute();
        // TODO: test validations
    }

    /**
     * List All Connections
     *
     * List all of the connections you have for your application. Connections represent the authenticated access you have to your customer&#39;s TSP data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllTest() throws ApiException {
        String cursor = null;
        String limit = null;
        String externalId = null;
        String dotNumber = null;
        String tag = null;
        api.listAll()
                .cursor(cursor)
                .limit(limit)
                .externalId(externalId)
                .dotNumber(dotNumber)
                .tag(tag)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Current Connection
     *
     * Update the details of the current active connection. The current connection is derived from the provided connection token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCurrentConnectionDetailsTest() throws ApiException {
        List<String> tags = null;
        ConnectionsUpdateCurrentConnectionDetailsRequestCompany company = null;
        String externalId = null;
        String status = null;
        String syncMode = null;
        String connectionToken = null;
        api.updateCurrentConnectionDetails()
                .tags(tags)
                .company(company)
                .externalId(externalId)
                .status(status)
                .syncMode(syncMode)
                .connectionToken(connectionToken)
                .execute();
        // TODO: test validations
    }

}
