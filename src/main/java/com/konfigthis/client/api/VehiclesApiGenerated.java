/*
 * Terminal API
 * Terminal is a unified API that makes it easy to integrate with the leading telematics service providers.  Contact Support:  Name: Terminal  Email: connect@withterminal.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VehiclesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VehiclesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VehiclesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllCall(String cursor, String limit, String modifiedAfter, String modifiedBefore, String raw, String expand, String connectionToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vehicles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (modifiedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedAfter", modifiedAfter));
        }

        if (modifiedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedBefore", modifiedBefore));
        }

        if (raw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("raw", raw));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (connectionToken != null) {
            localVarHeaderParams.put("connection-token", localVarApiClient.parameterToString(connectionToken));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String cursor, String limit, String modifiedAfter, String modifiedBefore, String raw, String expand, String connectionToken, final ApiCallback _callback) throws ApiException {
        return getAllCall(cursor, limit, modifiedAfter, modifiedBefore, raw, expand, connectionToken, _callback);

    }


    private ApiResponse<Void> getAllWithHttpInfo(String cursor, String limit, String modifiedAfter, String modifiedBefore, String raw, String expand, String connectionToken) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(cursor, limit, modifiedAfter, modifiedBefore, raw, expand, connectionToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getAllAsync(String cursor, String limit, String modifiedAfter, String modifiedBefore, String raw, String expand, String connectionToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(cursor, limit, modifiedAfter, modifiedBefore, raw, expand, connectionToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private String cursor;
        private String limit;
        private String modifiedAfter;
        private String modifiedBefore;
        private String raw;
        private String expand;
        private String connectionToken;

        private GetAllRequestBuilder() {
        }

        /**
         * Set cursor
         * @param cursor Pagination cursor to start requests from (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of results to return in a page. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set modifiedAfter
         * @param modifiedAfter Only include records that were last modified after a provided date. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder modifiedAfter(String modifiedAfter) {
            this.modifiedAfter = modifiedAfter;
            return this;
        }
        
        /**
         * Set modifiedBefore
         * @param modifiedBefore Only include records that were last modified before a provided date. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder modifiedBefore(String modifiedBefore) {
            this.modifiedBefore = modifiedBefore;
            return this;
        }
        
        /**
         * Set raw
         * @param raw Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder raw(String raw) {
            this.raw = raw;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Expand resources in the returned response (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set connectionToken
         * @param connectionToken (Required) The token returned when a user authenticated their account. This authorizes access to a specific account. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder connectionToken(String connectionToken) {
            this.connectionToken = connectionToken;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(cursor, limit, modifiedAfter, modifiedBefore, raw, expand, connectionToken, _callback);
        }


        /**
         * Execute getAll request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getAllWithHttpInfo(cursor, limit, modifiedAfter, modifiedBefore, raw, expand, connectionToken);
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(cursor, limit, modifiedAfter, modifiedBefore, raw, expand, connectionToken);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getAllAsync(cursor, limit, modifiedAfter, modifiedBefore, raw, expand, connectionToken, _callback);
        }
    }

    /**
     * List Vehicles
     * List all of the vehicles in the connected account
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getDetailsCall(String id, String raw, String expand, String connectionToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vehicles/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (raw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("raw", raw));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (connectionToken != null) {
            localVarHeaderParams.put("connection-token", localVarApiClient.parameterToString(connectionToken));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String id, String raw, String expand, String connectionToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDetails(Async)");
        }

        return getDetailsCall(id, raw, expand, connectionToken, _callback);

    }


    private ApiResponse<Void> getDetailsWithHttpInfo(String id, String raw, String expand, String connectionToken) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(id, raw, expand, connectionToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getDetailsAsync(String id, String raw, String expand, String connectionToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(id, raw, expand, connectionToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String id;
        private String raw;
        private String expand;
        private String connectionToken;

        private GetDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set raw
         * @param raw Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified. (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder raw(String raw) {
            this.raw = raw;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Expand resources in the returned response (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set connectionToken
         * @param connectionToken (Required) The token returned when a user authenticated their account. This authorizes access to a specific account. (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder connectionToken(String connectionToken) {
            this.connectionToken = connectionToken;
            return this;
        }
        
        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(id, raw, expand, connectionToken, _callback);
        }


        /**
         * Execute getDetails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getDetailsWithHttpInfo(id, raw, expand, connectionToken);
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(id, raw, expand, connectionToken);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getDetailsAsync(id, raw, expand, connectionToken, _callback);
        }
    }

    /**
     * Get Vehicle
     * Get the details of a specific vehicle
     * @param id (Required)  (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetDetailsRequestBuilder(id);
    }
    private okhttp3.Call getHistoricalStatsCall(String vehicleId, String cursor, String limit, String expand, String startAt, String endAt, String types, String raw, String connectionToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vehicles/{vehicleId}/stats/historical"
            .replace("{" + "vehicleId" + "}", localVarApiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (endAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endAt", endAt));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (raw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("raw", raw));
        }

        if (connectionToken != null) {
            localVarHeaderParams.put("connection-token", localVarApiClient.parameterToString(connectionToken));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHistoricalStatsValidateBeforeCall(String vehicleId, String cursor, String limit, String expand, String startAt, String endAt, String types, String raw, String connectionToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling getHistoricalStats(Async)");
        }

        return getHistoricalStatsCall(vehicleId, cursor, limit, expand, startAt, endAt, types, raw, connectionToken, _callback);

    }


    private ApiResponse<Void> getHistoricalStatsWithHttpInfo(String vehicleId, String cursor, String limit, String expand, String startAt, String endAt, String types, String raw, String connectionToken) throws ApiException {
        okhttp3.Call localVarCall = getHistoricalStatsValidateBeforeCall(vehicleId, cursor, limit, expand, startAt, endAt, types, raw, connectionToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getHistoricalStatsAsync(String vehicleId, String cursor, String limit, String expand, String startAt, String endAt, String types, String raw, String connectionToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHistoricalStatsValidateBeforeCall(vehicleId, cursor, limit, expand, startAt, endAt, types, raw, connectionToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetHistoricalStatsRequestBuilder {
        private final String vehicleId;
        private String cursor;
        private String limit;
        private String expand;
        private String startAt;
        private String endAt;
        private String types;
        private String raw;
        private String connectionToken;

        private GetHistoricalStatsRequestBuilder(String vehicleId) {
            this.vehicleId = vehicleId;
        }

        /**
         * Set cursor
         * @param cursor Pagination cursor to start requests from (optional)
         * @return GetHistoricalStatsRequestBuilder
         */
        public GetHistoricalStatsRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of results to return in a page. (optional)
         * @return GetHistoricalStatsRequestBuilder
         */
        public GetHistoricalStatsRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Expand resources in the returned response (optional)
         * @return GetHistoricalStatsRequestBuilder
         */
        public GetHistoricalStatsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt Timestamp to start from - defaults to &#x60;TODAY - 1 MONTH&#x60; (optional)
         * @return GetHistoricalStatsRequestBuilder
         */
        public GetHistoricalStatsRequestBuilder startAt(String startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set endAt
         * @param endAt Timestamp to end at - defaults to &#x60;TODAY&#x60; (optional)
         * @return GetHistoricalStatsRequestBuilder
         */
        public GetHistoricalStatsRequestBuilder endAt(String endAt) {
            this.endAt = endAt;
            return this;
        }
        
        /**
         * Set types
         * @param types Comma separated list of vehicle stats to filter for (optional)
         * @return GetHistoricalStatsRequestBuilder
         */
        public GetHistoricalStatsRequestBuilder types(String types) {
            this.types = types;
            return this;
        }
        
        /**
         * Set raw
         * @param raw Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified. (optional)
         * @return GetHistoricalStatsRequestBuilder
         */
        public GetHistoricalStatsRequestBuilder raw(String raw) {
            this.raw = raw;
            return this;
        }
        
        /**
         * Set connectionToken
         * @param connectionToken (Required) The token returned when a user authenticated their account. This authorizes access to a specific account. (optional)
         * @return GetHistoricalStatsRequestBuilder
         */
        public GetHistoricalStatsRequestBuilder connectionToken(String connectionToken) {
            this.connectionToken = connectionToken;
            return this;
        }
        
        /**
         * Build call for getHistoricalStats
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHistoricalStatsCall(vehicleId, cursor, limit, expand, startAt, endAt, types, raw, connectionToken, _callback);
        }


        /**
         * Execute getHistoricalStats request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getHistoricalStatsWithHttpInfo(vehicleId, cursor, limit, expand, startAt, endAt, types, raw, connectionToken);
        }

        /**
         * Execute getHistoricalStats request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getHistoricalStatsWithHttpInfo(vehicleId, cursor, limit, expand, startAt, endAt, types, raw, connectionToken);
        }

        /**
         * Execute getHistoricalStats request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getHistoricalStatsAsync(vehicleId, cursor, limit, expand, startAt, endAt, types, raw, connectionToken, _callback);
        }
    }

    /**
     * Historical Vehicle Stats
     * List historical stats and logs about the vehicle.
     * @param vehicleId (Required)  (required)
     * @return GetHistoricalStatsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetHistoricalStatsRequestBuilder getHistoricalStats(String vehicleId) throws IllegalArgumentException {
        if (vehicleId == null) throw new IllegalArgumentException("\"vehicleId\" is required but got null");
            

        return new GetHistoricalStatsRequestBuilder(vehicleId);
    }
    private okhttp3.Call getLatestLocationsCall(String cursor, String limit, String raw, String vehicleIds, String expand, String connectionToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vehicles/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (raw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("raw", raw));
        }

        if (vehicleIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleIds", vehicleIds));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (connectionToken != null) {
            localVarHeaderParams.put("connection-token", localVarApiClient.parameterToString(connectionToken));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestLocationsValidateBeforeCall(String cursor, String limit, String raw, String vehicleIds, String expand, String connectionToken, final ApiCallback _callback) throws ApiException {
        return getLatestLocationsCall(cursor, limit, raw, vehicleIds, expand, connectionToken, _callback);

    }


    private ApiResponse<Void> getLatestLocationsWithHttpInfo(String cursor, String limit, String raw, String vehicleIds, String expand, String connectionToken) throws ApiException {
        okhttp3.Call localVarCall = getLatestLocationsValidateBeforeCall(cursor, limit, raw, vehicleIds, expand, connectionToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getLatestLocationsAsync(String cursor, String limit, String raw, String vehicleIds, String expand, String connectionToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestLocationsValidateBeforeCall(cursor, limit, raw, vehicleIds, expand, connectionToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetLatestLocationsRequestBuilder {
        private String cursor;
        private String limit;
        private String raw;
        private String vehicleIds;
        private String expand;
        private String connectionToken;

        private GetLatestLocationsRequestBuilder() {
        }

        /**
         * Set cursor
         * @param cursor Pagination cursor to start requests from (optional)
         * @return GetLatestLocationsRequestBuilder
         */
        public GetLatestLocationsRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of results to return in a page. (optional)
         * @return GetLatestLocationsRequestBuilder
         */
        public GetLatestLocationsRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set raw
         * @param raw Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified. (optional)
         * @return GetLatestLocationsRequestBuilder
         */
        public GetLatestLocationsRequestBuilder raw(String raw) {
            this.raw = raw;
            return this;
        }
        
        /**
         * Set vehicleIds
         * @param vehicleIds Comma separated list of vehicle IDs to filter for (optional)
         * @return GetLatestLocationsRequestBuilder
         */
        public GetLatestLocationsRequestBuilder vehicleIds(String vehicleIds) {
            this.vehicleIds = vehicleIds;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Expand resources in the returned response (optional)
         * @return GetLatestLocationsRequestBuilder
         */
        public GetLatestLocationsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set connectionToken
         * @param connectionToken (Required) The token returned when a user authenticated their account. This authorizes access to a specific account. (optional)
         * @return GetLatestLocationsRequestBuilder
         */
        public GetLatestLocationsRequestBuilder connectionToken(String connectionToken) {
            this.connectionToken = connectionToken;
            return this;
        }
        
        /**
         * Build call for getLatestLocations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLatestLocationsCall(cursor, limit, raw, vehicleIds, expand, connectionToken, _callback);
        }


        /**
         * Execute getLatestLocations request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getLatestLocationsWithHttpInfo(cursor, limit, raw, vehicleIds, expand, connectionToken);
        }

        /**
         * Execute getLatestLocations request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getLatestLocationsWithHttpInfo(cursor, limit, raw, vehicleIds, expand, connectionToken);
        }

        /**
         * Execute getLatestLocations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getLatestLocationsAsync(cursor, limit, raw, vehicleIds, expand, connectionToken, _callback);
        }
    }

    /**
     * Latest Vehicle Locations
     * List the latest location of the vehicles in the connected account. This endpoint will call the provider&#39;s API in real time to get the latest location of the vehicle.  _Please note: this endpoint will exclude vehicles that have no last known location._
     * @return GetLatestLocationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetLatestLocationsRequestBuilder getLatestLocations() throws IllegalArgumentException {
        return new GetLatestLocationsRequestBuilder();
    }
    private okhttp3.Call listHistoricalLocationsCall(String vehicleId, String cursor, String limit, String startAt, String endAt, String raw, String connectionToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vehicles/{vehicleId}/locations"
            .replace("{" + "vehicleId" + "}", localVarApiClient.escapeString(vehicleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (endAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endAt", endAt));
        }

        if (raw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("raw", raw));
        }

        if (connectionToken != null) {
            localVarHeaderParams.put("connection-token", localVarApiClient.parameterToString(connectionToken));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHistoricalLocationsValidateBeforeCall(String vehicleId, String cursor, String limit, String startAt, String endAt, String raw, String connectionToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vehicleId' is set
        if (vehicleId == null) {
            throw new ApiException("Missing the required parameter 'vehicleId' when calling listHistoricalLocations(Async)");
        }

        return listHistoricalLocationsCall(vehicleId, cursor, limit, startAt, endAt, raw, connectionToken, _callback);

    }


    private ApiResponse<Void> listHistoricalLocationsWithHttpInfo(String vehicleId, String cursor, String limit, String startAt, String endAt, String raw, String connectionToken) throws ApiException {
        okhttp3.Call localVarCall = listHistoricalLocationsValidateBeforeCall(vehicleId, cursor, limit, startAt, endAt, raw, connectionToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listHistoricalLocationsAsync(String vehicleId, String cursor, String limit, String startAt, String endAt, String raw, String connectionToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHistoricalLocationsValidateBeforeCall(vehicleId, cursor, limit, startAt, endAt, raw, connectionToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListHistoricalLocationsRequestBuilder {
        private final String vehicleId;
        private String cursor;
        private String limit;
        private String startAt;
        private String endAt;
        private String raw;
        private String connectionToken;

        private ListHistoricalLocationsRequestBuilder(String vehicleId) {
            this.vehicleId = vehicleId;
        }

        /**
         * Set cursor
         * @param cursor Pagination cursor to start requests from (optional)
         * @return ListHistoricalLocationsRequestBuilder
         */
        public ListHistoricalLocationsRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of results to return in a page. (optional)
         * @return ListHistoricalLocationsRequestBuilder
         */
        public ListHistoricalLocationsRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt Timestamp to start from - defaults to &#x60;TODAY - 1 MONTH&#x60; (optional)
         * @return ListHistoricalLocationsRequestBuilder
         */
        public ListHistoricalLocationsRequestBuilder startAt(String startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set endAt
         * @param endAt Timestamp to end at - defaults to &#x60;TODAY&#x60; (optional)
         * @return ListHistoricalLocationsRequestBuilder
         */
        public ListHistoricalLocationsRequestBuilder endAt(String endAt) {
            this.endAt = endAt;
            return this;
        }
        
        /**
         * Set raw
         * @param raw Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified. (optional)
         * @return ListHistoricalLocationsRequestBuilder
         */
        public ListHistoricalLocationsRequestBuilder raw(String raw) {
            this.raw = raw;
            return this;
        }
        
        /**
         * Set connectionToken
         * @param connectionToken (Required) The token returned when a user authenticated their account. This authorizes access to a specific account. (optional)
         * @return ListHistoricalLocationsRequestBuilder
         */
        public ListHistoricalLocationsRequestBuilder connectionToken(String connectionToken) {
            this.connectionToken = connectionToken;
            return this;
        }
        
        /**
         * Build call for listHistoricalLocations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listHistoricalLocationsCall(vehicleId, cursor, limit, startAt, endAt, raw, connectionToken, _callback);
        }


        /**
         * Execute listHistoricalLocations request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listHistoricalLocationsWithHttpInfo(vehicleId, cursor, limit, startAt, endAt, raw, connectionToken);
        }

        /**
         * Execute listHistoricalLocations request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listHistoricalLocationsWithHttpInfo(vehicleId, cursor, limit, startAt, endAt, raw, connectionToken);
        }

        /**
         * Execute listHistoricalLocations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listHistoricalLocationsAsync(vehicleId, cursor, limit, startAt, endAt, raw, connectionToken, _callback);
        }
    }

    /**
     * Historical Vehicle Locations
     * List the historical breadcrumb locations for a vehicle.  _Note:_  Given the large volume of location data available, we encourage customers to accept compressed (&#x60;gzip&#x60;) responses in order to maximize throughput. This is supported with many popular HTTP clients. Result limits vary depending on if results are compressed or not.
     * @param vehicleId (Required) Vehicle to retrieve breadcrumb locations for (required)
     * @return ListHistoricalLocationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListHistoricalLocationsRequestBuilder listHistoricalLocations(String vehicleId) throws IllegalArgumentException {
        if (vehicleId == null) throw new IllegalArgumentException("\"vehicleId\" is required but got null");
            

        return new ListHistoricalLocationsRequestBuilder(vehicleId);
    }
}
