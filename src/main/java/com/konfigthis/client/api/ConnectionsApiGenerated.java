/*
 * Terminal API
 * Terminal is a unified API that makes it easy to integrate with the leading telematics service providers.  Contact Support:  Name: Terminal  Email: connect@withterminal.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ConnectionsCreateCustomConnectionRequest;
import com.konfigthis.client.model.ConnectionsCreateCustomConnectionRequestBackfill;
import com.konfigthis.client.model.ConnectionsCreateCustomConnectionRequestCompany;
import com.konfigthis.client.model.ConnectionsCreateCustomConnectionRequestCredentials;
import com.konfigthis.client.model.ConnectionsUpdateCurrentConnectionDetailsRequest;
import com.konfigthis.client.model.ConnectionsUpdateCurrentConnectionDetailsRequestCompany;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ConnectionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConnectionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCustomConnectionCall(ConnectionsCreateCustomConnectionRequest connectionsCreateCustomConnectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionsCreateCustomConnectionRequest;

        // create path and map variables
        String localVarPath = "/connections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomConnectionValidateBeforeCall(ConnectionsCreateCustomConnectionRequest connectionsCreateCustomConnectionRequest, final ApiCallback _callback) throws ApiException {
        return createCustomConnectionCall(connectionsCreateCustomConnectionRequest, _callback);

    }


    private ApiResponse<Void> createCustomConnectionWithHttpInfo(ConnectionsCreateCustomConnectionRequest connectionsCreateCustomConnectionRequest) throws ApiException {
        okhttp3.Call localVarCall = createCustomConnectionValidateBeforeCall(connectionsCreateCustomConnectionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createCustomConnectionAsync(ConnectionsCreateCustomConnectionRequest connectionsCreateCustomConnectionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomConnectionValidateBeforeCall(connectionsCreateCustomConnectionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateCustomConnectionRequestBuilder {
        private List<String> tags;
        private ConnectionsCreateCustomConnectionRequestBackfill backfill;
        private ConnectionsCreateCustomConnectionRequestCompany company;
        private ConnectionsCreateCustomConnectionRequestCredentials credentials;
        private String externalId;
        private String provider;
        private String syncMode;

        private CreateCustomConnectionRequestBuilder() {
        }

        /**
         * Set tags
         * @param tags  (optional)
         * @return CreateCustomConnectionRequestBuilder
         */
        public CreateCustomConnectionRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set backfill
         * @param backfill  (optional)
         * @return CreateCustomConnectionRequestBuilder
         */
        public CreateCustomConnectionRequestBuilder backfill(ConnectionsCreateCustomConnectionRequestBackfill backfill) {
            this.backfill = backfill;
            return this;
        }
        
        /**
         * Set company
         * @param company  (optional)
         * @return CreateCustomConnectionRequestBuilder
         */
        public CreateCustomConnectionRequestBuilder company(ConnectionsCreateCustomConnectionRequestCompany company) {
            this.company = company;
            return this;
        }
        
        /**
         * Set credentials
         * @param credentials  (optional)
         * @return CreateCustomConnectionRequestBuilder
         */
        public CreateCustomConnectionRequestBuilder credentials(ConnectionsCreateCustomConnectionRequestCredentials credentials) {
            this.credentials = credentials;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId  (optional)
         * @return CreateCustomConnectionRequestBuilder
         */
        public CreateCustomConnectionRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set provider
         * @param provider  (optional)
         * @return CreateCustomConnectionRequestBuilder
         */
        public CreateCustomConnectionRequestBuilder provider(String provider) {
            this.provider = provider;
            return this;
        }
        
        /**
         * Set syncMode
         * @param syncMode  (optional)
         * @return CreateCustomConnectionRequestBuilder
         */
        public CreateCustomConnectionRequestBuilder syncMode(String syncMode) {
            this.syncMode = syncMode;
            return this;
        }
        
        /**
         * Build call for createCustomConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConnectionsCreateCustomConnectionRequest connectionsCreateCustomConnectionRequest = buildBodyParams();
            return createCustomConnectionCall(connectionsCreateCustomConnectionRequest, _callback);
        }

        private ConnectionsCreateCustomConnectionRequest buildBodyParams() {
            ConnectionsCreateCustomConnectionRequest connectionsCreateCustomConnectionRequest = new ConnectionsCreateCustomConnectionRequest();
            connectionsCreateCustomConnectionRequest.tags(this.tags);
            connectionsCreateCustomConnectionRequest.backfill(this.backfill);
            connectionsCreateCustomConnectionRequest.company(this.company);
            connectionsCreateCustomConnectionRequest.credentials(this.credentials);
            connectionsCreateCustomConnectionRequest.externalId(this.externalId);
            connectionsCreateCustomConnectionRequest.provider(this.provider);
            connectionsCreateCustomConnectionRequest.syncMode(this.syncMode);
            return connectionsCreateCustomConnectionRequest;
        }

        /**
         * Execute createCustomConnection request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ConnectionsCreateCustomConnectionRequest connectionsCreateCustomConnectionRequest = buildBodyParams();
            createCustomConnectionWithHttpInfo(connectionsCreateCustomConnectionRequest);
        }

        /**
         * Execute createCustomConnection request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ConnectionsCreateCustomConnectionRequest connectionsCreateCustomConnectionRequest = buildBodyParams();
            return createCustomConnectionWithHttpInfo(connectionsCreateCustomConnectionRequest);
        }

        /**
         * Execute createCustomConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ConnectionsCreateCustomConnectionRequest connectionsCreateCustomConnectionRequest = buildBodyParams();
            return createCustomConnectionAsync(connectionsCreateCustomConnectionRequest, _callback);
        }
    }

    /**
     * Create Connection
     * Create a new connection via API. This endpoint can be used to provide a completely custom connection creation experience for your customers.  For most use cases we recommend using the [Link UI](./rhuaxk9205cn8-link-component) to create connections.
     * @return CreateCustomConnectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomConnectionRequestBuilder createCustomConnection() throws IllegalArgumentException {
        return new CreateCustomConnectionRequestBuilder();
    }
    private okhttp3.Call getCurrentDetailsCall(String connectionToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connections/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (connectionToken != null) {
            localVarHeaderParams.put("connection-token", localVarApiClient.parameterToString(connectionToken));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentDetailsValidateBeforeCall(String connectionToken, final ApiCallback _callback) throws ApiException {
        return getCurrentDetailsCall(connectionToken, _callback);

    }


    private ApiResponse<Void> getCurrentDetailsWithHttpInfo(String connectionToken) throws ApiException {
        okhttp3.Call localVarCall = getCurrentDetailsValidateBeforeCall(connectionToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCurrentDetailsAsync(String connectionToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentDetailsValidateBeforeCall(connectionToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCurrentDetailsRequestBuilder {
        private String connectionToken;

        private GetCurrentDetailsRequestBuilder() {
        }

        /**
         * Set connectionToken
         * @param connectionToken (Required) The token returned when a user authenticated their account. This authorizes access to a specific account. (optional)
         * @return GetCurrentDetailsRequestBuilder
         */
        public GetCurrentDetailsRequestBuilder connectionToken(String connectionToken) {
            this.connectionToken = connectionToken;
            return this;
        }
        
        /**
         * Build call for getCurrentDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentDetailsCall(connectionToken, _callback);
        }


        /**
         * Execute getCurrentDetails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCurrentDetailsWithHttpInfo(connectionToken);
        }

        /**
         * Execute getCurrentDetails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCurrentDetailsWithHttpInfo(connectionToken);
        }

        /**
         * Execute getCurrentDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCurrentDetailsAsync(connectionToken, _callback);
        }
    }

    /**
     * Get Current Connection
     * Get the details of the current active connection. The current connection is derived from the provided connection token.
     * @return GetCurrentDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentDetailsRequestBuilder getCurrentDetails() throws IllegalArgumentException {
        return new GetCurrentDetailsRequestBuilder();
    }
    private okhttp3.Call listAllCall(String cursor, String limit, String externalId, String dotNumber, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalId", externalId));
        }

        if (dotNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dotNumber", dotNumber));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(String cursor, String limit, String externalId, String dotNumber, String tag, final ApiCallback _callback) throws ApiException {
        return listAllCall(cursor, limit, externalId, dotNumber, tag, _callback);

    }


    private ApiResponse<Void> listAllWithHttpInfo(String cursor, String limit, String externalId, String dotNumber, String tag) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(cursor, limit, externalId, dotNumber, tag, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listAllAsync(String cursor, String limit, String externalId, String dotNumber, String tag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(cursor, limit, externalId, dotNumber, tag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private String cursor;
        private String limit;
        private String externalId;
        private String dotNumber;
        private String tag;

        private ListAllRequestBuilder() {
        }

        /**
         * Set cursor
         * @param cursor Pagination cursor to start requests from (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of results to return in a page. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId  (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set dotNumber
         * @param dotNumber  (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder dotNumber(String dotNumber) {
            this.dotNumber = dotNumber;
            return this;
        }
        
        /**
         * Set tag
         * @param tag Filter connections by tag (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(cursor, limit, externalId, dotNumber, tag, _callback);
        }


        /**
         * Execute listAll request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listAllWithHttpInfo(cursor, limit, externalId, dotNumber, tag);
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(cursor, limit, externalId, dotNumber, tag);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listAllAsync(cursor, limit, externalId, dotNumber, tag, _callback);
        }
    }

    /**
     * List All Connections
     * List all of the connections you have for your application. Connections represent the authenticated access you have to your customer&#39;s TSP data.
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call updateCurrentConnectionDetailsCall(String connectionToken, ConnectionsUpdateCurrentConnectionDetailsRequest connectionsUpdateCurrentConnectionDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionsUpdateCurrentConnectionDetailsRequest;

        // create path and map variables
        String localVarPath = "/connections/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (connectionToken != null) {
            localVarHeaderParams.put("connection-token", localVarApiClient.parameterToString(connectionToken));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCurrentConnectionDetailsValidateBeforeCall(String connectionToken, ConnectionsUpdateCurrentConnectionDetailsRequest connectionsUpdateCurrentConnectionDetailsRequest, final ApiCallback _callback) throws ApiException {
        return updateCurrentConnectionDetailsCall(connectionToken, connectionsUpdateCurrentConnectionDetailsRequest, _callback);

    }


    private ApiResponse<Void> updateCurrentConnectionDetailsWithHttpInfo(String connectionToken, ConnectionsUpdateCurrentConnectionDetailsRequest connectionsUpdateCurrentConnectionDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCurrentConnectionDetailsValidateBeforeCall(connectionToken, connectionsUpdateCurrentConnectionDetailsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateCurrentConnectionDetailsAsync(String connectionToken, ConnectionsUpdateCurrentConnectionDetailsRequest connectionsUpdateCurrentConnectionDetailsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCurrentConnectionDetailsValidateBeforeCall(connectionToken, connectionsUpdateCurrentConnectionDetailsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateCurrentConnectionDetailsRequestBuilder {
        private List<String> tags;
        private ConnectionsUpdateCurrentConnectionDetailsRequestCompany company;
        private String externalId;
        private String status;
        private String syncMode;
        private String connectionToken;

        private UpdateCurrentConnectionDetailsRequestBuilder() {
        }

        /**
         * Set tags
         * @param tags  (optional)
         * @return UpdateCurrentConnectionDetailsRequestBuilder
         */
        public UpdateCurrentConnectionDetailsRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set company
         * @param company  (optional)
         * @return UpdateCurrentConnectionDetailsRequestBuilder
         */
        public UpdateCurrentConnectionDetailsRequestBuilder company(ConnectionsUpdateCurrentConnectionDetailsRequestCompany company) {
            this.company = company;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId  (optional)
         * @return UpdateCurrentConnectionDetailsRequestBuilder
         */
        public UpdateCurrentConnectionDetailsRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateCurrentConnectionDetailsRequestBuilder
         */
        public UpdateCurrentConnectionDetailsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set syncMode
         * @param syncMode  (optional)
         * @return UpdateCurrentConnectionDetailsRequestBuilder
         */
        public UpdateCurrentConnectionDetailsRequestBuilder syncMode(String syncMode) {
            this.syncMode = syncMode;
            return this;
        }
        
        /**
         * Set connectionToken
         * @param connectionToken (Required) The token returned when a user authenticated their account. This authorizes access to a specific account. (optional)
         * @return UpdateCurrentConnectionDetailsRequestBuilder
         */
        public UpdateCurrentConnectionDetailsRequestBuilder connectionToken(String connectionToken) {
            this.connectionToken = connectionToken;
            return this;
        }
        
        /**
         * Build call for updateCurrentConnectionDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConnectionsUpdateCurrentConnectionDetailsRequest connectionsUpdateCurrentConnectionDetailsRequest = buildBodyParams();
            return updateCurrentConnectionDetailsCall(connectionToken, connectionsUpdateCurrentConnectionDetailsRequest, _callback);
        }

        private ConnectionsUpdateCurrentConnectionDetailsRequest buildBodyParams() {
            ConnectionsUpdateCurrentConnectionDetailsRequest connectionsUpdateCurrentConnectionDetailsRequest = new ConnectionsUpdateCurrentConnectionDetailsRequest();
            connectionsUpdateCurrentConnectionDetailsRequest.tags(this.tags);
            connectionsUpdateCurrentConnectionDetailsRequest.company(this.company);
            connectionsUpdateCurrentConnectionDetailsRequest.externalId(this.externalId);
            connectionsUpdateCurrentConnectionDetailsRequest.status(this.status);
            connectionsUpdateCurrentConnectionDetailsRequest.syncMode(this.syncMode);
            return connectionsUpdateCurrentConnectionDetailsRequest;
        }

        /**
         * Execute updateCurrentConnectionDetails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ConnectionsUpdateCurrentConnectionDetailsRequest connectionsUpdateCurrentConnectionDetailsRequest = buildBodyParams();
            updateCurrentConnectionDetailsWithHttpInfo(connectionToken, connectionsUpdateCurrentConnectionDetailsRequest);
        }

        /**
         * Execute updateCurrentConnectionDetails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ConnectionsUpdateCurrentConnectionDetailsRequest connectionsUpdateCurrentConnectionDetailsRequest = buildBodyParams();
            return updateCurrentConnectionDetailsWithHttpInfo(connectionToken, connectionsUpdateCurrentConnectionDetailsRequest);
        }

        /**
         * Execute updateCurrentConnectionDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ConnectionsUpdateCurrentConnectionDetailsRequest connectionsUpdateCurrentConnectionDetailsRequest = buildBodyParams();
            return updateCurrentConnectionDetailsAsync(connectionToken, connectionsUpdateCurrentConnectionDetailsRequest, _callback);
        }
    }

    /**
     * Update Current Connection
     * Update the details of the current active connection. The current connection is derived from the provided connection token.
     * @return UpdateCurrentConnectionDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCurrentConnectionDetailsRequestBuilder updateCurrentConnectionDetails() throws IllegalArgumentException {
        return new UpdateCurrentConnectionDetailsRequestBuilder();
    }
}
