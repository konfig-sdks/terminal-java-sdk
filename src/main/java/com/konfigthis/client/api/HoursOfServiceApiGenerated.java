/*
 * Terminal API
 * Terminal is a unified API that makes it easy to integrate with the leading telematics service providers.  Contact Support:  Name: Terminal  Email: connect@withterminal.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class HoursOfServiceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HoursOfServiceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public HoursOfServiceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAvailableTimeCall(String cursor, String limit, String driverIds, String expand, String raw, String connectionToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hos/available-time";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (driverIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("driverIds", driverIds));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (raw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("raw", raw));
        }

        if (connectionToken != null) {
            localVarHeaderParams.put("connection-token", localVarApiClient.parameterToString(connectionToken));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableTimeValidateBeforeCall(String cursor, String limit, String driverIds, String expand, String raw, String connectionToken, final ApiCallback _callback) throws ApiException {
        return getAvailableTimeCall(cursor, limit, driverIds, expand, raw, connectionToken, _callback);

    }


    private ApiResponse<Void> getAvailableTimeWithHttpInfo(String cursor, String limit, String driverIds, String expand, String raw, String connectionToken) throws ApiException {
        okhttp3.Call localVarCall = getAvailableTimeValidateBeforeCall(cursor, limit, driverIds, expand, raw, connectionToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getAvailableTimeAsync(String cursor, String limit, String driverIds, String expand, String raw, String connectionToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableTimeValidateBeforeCall(cursor, limit, driverIds, expand, raw, connectionToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetAvailableTimeRequestBuilder {
        private String cursor;
        private String limit;
        private String driverIds;
        private String expand;
        private String raw;
        private String connectionToken;

        private GetAvailableTimeRequestBuilder() {
        }

        /**
         * Set cursor
         * @param cursor Pagination cursor to start requests from (optional)
         * @return GetAvailableTimeRequestBuilder
         */
        public GetAvailableTimeRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of results to return in a page. (optional)
         * @return GetAvailableTimeRequestBuilder
         */
        public GetAvailableTimeRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set driverIds
         * @param driverIds Comma separated list of driver IDs to filter for (optional)
         * @return GetAvailableTimeRequestBuilder
         */
        public GetAvailableTimeRequestBuilder driverIds(String driverIds) {
            this.driverIds = driverIds;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Expand resources in the returned response (optional)
         * @return GetAvailableTimeRequestBuilder
         */
        public GetAvailableTimeRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set raw
         * @param raw Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified. (optional)
         * @return GetAvailableTimeRequestBuilder
         */
        public GetAvailableTimeRequestBuilder raw(String raw) {
            this.raw = raw;
            return this;
        }
        
        /**
         * Set connectionToken
         * @param connectionToken (Required) The token returned when a user authenticated their account. This authorizes access to a specific account. (optional)
         * @return GetAvailableTimeRequestBuilder
         */
        public GetAvailableTimeRequestBuilder connectionToken(String connectionToken) {
            this.connectionToken = connectionToken;
            return this;
        }
        
        /**
         * Build call for getAvailableTime
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAvailableTimeCall(cursor, limit, driverIds, expand, raw, connectionToken, _callback);
        }


        /**
         * Execute getAvailableTime request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getAvailableTimeWithHttpInfo(cursor, limit, driverIds, expand, raw, connectionToken);
        }

        /**
         * Execute getAvailableTime request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getAvailableTimeWithHttpInfo(cursor, limit, driverIds, expand, raw, connectionToken);
        }

        /**
         * Execute getAvailableTime request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getAvailableTimeAsync(cursor, limit, driverIds, expand, raw, connectionToken, _callback);
        }
    }

    /**
     * Available Time for Drivers
     * List available time for the driver. This endpoint provides live access to the driver&#39;s available time. Different than most endpoints, this endpoint calls the provider&#39;s API in real time to get the latest available time for the driver. This endpoint is useful for building real time applications that need to know the driver&#39;s available time.
     * @return GetAvailableTimeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAvailableTimeRequestBuilder getAvailableTime() throws IllegalArgumentException {
        return new GetAvailableTimeRequestBuilder();
    }
    private okhttp3.Call getDailyLogsCall(String cursor, String limit, String startDate, String endDate, String modifiedAfter, String modifiedBefore, String driverIds, String raw, String expand, String connectionToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hos/daily-logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (modifiedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedAfter", modifiedAfter));
        }

        if (modifiedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedBefore", modifiedBefore));
        }

        if (driverIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("driverIds", driverIds));
        }

        if (raw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("raw", raw));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (connectionToken != null) {
            localVarHeaderParams.put("connection-token", localVarApiClient.parameterToString(connectionToken));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDailyLogsValidateBeforeCall(String cursor, String limit, String startDate, String endDate, String modifiedAfter, String modifiedBefore, String driverIds, String raw, String expand, String connectionToken, final ApiCallback _callback) throws ApiException {
        return getDailyLogsCall(cursor, limit, startDate, endDate, modifiedAfter, modifiedBefore, driverIds, raw, expand, connectionToken, _callback);

    }


    private ApiResponse<Void> getDailyLogsWithHttpInfo(String cursor, String limit, String startDate, String endDate, String modifiedAfter, String modifiedBefore, String driverIds, String raw, String expand, String connectionToken) throws ApiException {
        okhttp3.Call localVarCall = getDailyLogsValidateBeforeCall(cursor, limit, startDate, endDate, modifiedAfter, modifiedBefore, driverIds, raw, expand, connectionToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getDailyLogsAsync(String cursor, String limit, String startDate, String endDate, String modifiedAfter, String modifiedBefore, String driverIds, String raw, String expand, String connectionToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDailyLogsValidateBeforeCall(cursor, limit, startDate, endDate, modifiedAfter, modifiedBefore, driverIds, raw, expand, connectionToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetDailyLogsRequestBuilder {
        private String cursor;
        private String limit;
        private String startDate;
        private String endDate;
        private String modifiedAfter;
        private String modifiedBefore;
        private String driverIds;
        private String raw;
        private String expand;
        private String connectionToken;

        private GetDailyLogsRequestBuilder() {
        }

        /**
         * Set cursor
         * @param cursor Pagination cursor to start requests from (optional)
         * @return GetDailyLogsRequestBuilder
         */
        public GetDailyLogsRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of results to return in a page. (optional)
         * @return GetDailyLogsRequestBuilder
         */
        public GetDailyLogsRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Only include daily logs from on or after a specific date (optional)
         * @return GetDailyLogsRequestBuilder
         */
        public GetDailyLogsRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Only include daily logs from on or before a specific date (optional)
         * @return GetDailyLogsRequestBuilder
         */
        public GetDailyLogsRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set modifiedAfter
         * @param modifiedAfter Only include records that were last modified after a provided date. (optional)
         * @return GetDailyLogsRequestBuilder
         */
        public GetDailyLogsRequestBuilder modifiedAfter(String modifiedAfter) {
            this.modifiedAfter = modifiedAfter;
            return this;
        }
        
        /**
         * Set modifiedBefore
         * @param modifiedBefore Only include records that were last modified before a provided date. (optional)
         * @return GetDailyLogsRequestBuilder
         */
        public GetDailyLogsRequestBuilder modifiedBefore(String modifiedBefore) {
            this.modifiedBefore = modifiedBefore;
            return this;
        }
        
        /**
         * Set driverIds
         * @param driverIds Comma separated list of driver IDs to filter for (optional)
         * @return GetDailyLogsRequestBuilder
         */
        public GetDailyLogsRequestBuilder driverIds(String driverIds) {
            this.driverIds = driverIds;
            return this;
        }
        
        /**
         * Set raw
         * @param raw Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified. (optional)
         * @return GetDailyLogsRequestBuilder
         */
        public GetDailyLogsRequestBuilder raw(String raw) {
            this.raw = raw;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Expand resources in the returned response (optional)
         * @return GetDailyLogsRequestBuilder
         */
        public GetDailyLogsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set connectionToken
         * @param connectionToken (Required) The token returned when a user authenticated their account. This authorizes access to a specific account. (optional)
         * @return GetDailyLogsRequestBuilder
         */
        public GetDailyLogsRequestBuilder connectionToken(String connectionToken) {
            this.connectionToken = connectionToken;
            return this;
        }
        
        /**
         * Build call for getDailyLogs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDailyLogsCall(cursor, limit, startDate, endDate, modifiedAfter, modifiedBefore, driverIds, raw, expand, connectionToken, _callback);
        }


        /**
         * Execute getDailyLogs request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getDailyLogsWithHttpInfo(cursor, limit, startDate, endDate, modifiedAfter, modifiedBefore, driverIds, raw, expand, connectionToken);
        }

        /**
         * Execute getDailyLogs request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getDailyLogsWithHttpInfo(cursor, limit, startDate, endDate, modifiedAfter, modifiedBefore, driverIds, raw, expand, connectionToken);
        }

        /**
         * Execute getDailyLogs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getDailyLogsAsync(cursor, limit, startDate, endDate, modifiedAfter, modifiedBefore, driverIds, raw, expand, connectionToken, _callback);
        }
    }

    /**
     * List HOS Daily Logs
     * List daily summary of hours of service. Each daily log represents the time a driver spent in each duty status for a given day.
     * @return GetDailyLogsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetDailyLogsRequestBuilder getDailyLogs() throws IllegalArgumentException {
        return new GetDailyLogsRequestBuilder();
    }
    private okhttp3.Call listHosLogsCall(String cursor, String limit, String startedAfter, String startedBefore, String modifiedAfter, String modifiedBefore, String driverIds, String expand, String raw, String connectionToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hos/logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startedAfter", startedAfter));
        }

        if (startedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startedBefore", startedBefore));
        }

        if (modifiedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedAfter", modifiedAfter));
        }

        if (modifiedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedBefore", modifiedBefore));
        }

        if (driverIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("driverIds", driverIds));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (raw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("raw", raw));
        }

        if (connectionToken != null) {
            localVarHeaderParams.put("connection-token", localVarApiClient.parameterToString(connectionToken));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHosLogsValidateBeforeCall(String cursor, String limit, String startedAfter, String startedBefore, String modifiedAfter, String modifiedBefore, String driverIds, String expand, String raw, String connectionToken, final ApiCallback _callback) throws ApiException {
        return listHosLogsCall(cursor, limit, startedAfter, startedBefore, modifiedAfter, modifiedBefore, driverIds, expand, raw, connectionToken, _callback);

    }


    private ApiResponse<Void> listHosLogsWithHttpInfo(String cursor, String limit, String startedAfter, String startedBefore, String modifiedAfter, String modifiedBefore, String driverIds, String expand, String raw, String connectionToken) throws ApiException {
        okhttp3.Call localVarCall = listHosLogsValidateBeforeCall(cursor, limit, startedAfter, startedBefore, modifiedAfter, modifiedBefore, driverIds, expand, raw, connectionToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listHosLogsAsync(String cursor, String limit, String startedAfter, String startedBefore, String modifiedAfter, String modifiedBefore, String driverIds, String expand, String raw, String connectionToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHosLogsValidateBeforeCall(cursor, limit, startedAfter, startedBefore, modifiedAfter, modifiedBefore, driverIds, expand, raw, connectionToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListHosLogsRequestBuilder {
        private String cursor;
        private String limit;
        private String startedAfter;
        private String startedBefore;
        private String modifiedAfter;
        private String modifiedBefore;
        private String driverIds;
        private String expand;
        private String raw;
        private String connectionToken;

        private ListHosLogsRequestBuilder() {
        }

        /**
         * Set cursor
         * @param cursor Pagination cursor to start requests from (optional)
         * @return ListHosLogsRequestBuilder
         */
        public ListHosLogsRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of results to return in a page. (optional)
         * @return ListHosLogsRequestBuilder
         */
        public ListHosLogsRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set startedAfter
         * @param startedAfter Only include records of statuses that started after a provided date. (optional)
         * @return ListHosLogsRequestBuilder
         */
        public ListHosLogsRequestBuilder startedAfter(String startedAfter) {
            this.startedAfter = startedAfter;
            return this;
        }
        
        /**
         * Set startedBefore
         * @param startedBefore Only include records of statuses that started before a provided date. (optional)
         * @return ListHosLogsRequestBuilder
         */
        public ListHosLogsRequestBuilder startedBefore(String startedBefore) {
            this.startedBefore = startedBefore;
            return this;
        }
        
        /**
         * Set modifiedAfter
         * @param modifiedAfter Only include records that were last modified after a provided date. (optional)
         * @return ListHosLogsRequestBuilder
         */
        public ListHosLogsRequestBuilder modifiedAfter(String modifiedAfter) {
            this.modifiedAfter = modifiedAfter;
            return this;
        }
        
        /**
         * Set modifiedBefore
         * @param modifiedBefore Only include records that were last modified before a provided date. (optional)
         * @return ListHosLogsRequestBuilder
         */
        public ListHosLogsRequestBuilder modifiedBefore(String modifiedBefore) {
            this.modifiedBefore = modifiedBefore;
            return this;
        }
        
        /**
         * Set driverIds
         * @param driverIds Comma separated list of driver IDs to filter for (optional)
         * @return ListHosLogsRequestBuilder
         */
        public ListHosLogsRequestBuilder driverIds(String driverIds) {
            this.driverIds = driverIds;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Expand resources in the returned response (optional)
         * @return ListHosLogsRequestBuilder
         */
        public ListHosLogsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set raw
         * @param raw Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified. (optional)
         * @return ListHosLogsRequestBuilder
         */
        public ListHosLogsRequestBuilder raw(String raw) {
            this.raw = raw;
            return this;
        }
        
        /**
         * Set connectionToken
         * @param connectionToken (Required) The token returned when a user authenticated their account. This authorizes access to a specific account. (optional)
         * @return ListHosLogsRequestBuilder
         */
        public ListHosLogsRequestBuilder connectionToken(String connectionToken) {
            this.connectionToken = connectionToken;
            return this;
        }
        
        /**
         * Build call for listHosLogs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listHosLogsCall(cursor, limit, startedAfter, startedBefore, modifiedAfter, modifiedBefore, driverIds, expand, raw, connectionToken, _callback);
        }


        /**
         * Execute listHosLogs request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listHosLogsWithHttpInfo(cursor, limit, startedAfter, startedBefore, modifiedAfter, modifiedBefore, driverIds, expand, raw, connectionToken);
        }

        /**
         * Execute listHosLogs request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listHosLogsWithHttpInfo(cursor, limit, startedAfter, startedBefore, modifiedAfter, modifiedBefore, driverIds, expand, raw, connectionToken);
        }

        /**
         * Execute listHosLogs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listHosLogsAsync(cursor, limit, startedAfter, startedBefore, modifiedAfter, modifiedBefore, driverIds, expand, raw, connectionToken, _callback);
        }
    }

    /**
     * List HOS Logs
     * List all hours of service logs. Currently, HOS logs are tracked as the distinct changes in duty status. In the future we will be offering endpoints to expose current HOS status and historical daily summaries.
     * @return ListHosLogsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListHosLogsRequestBuilder listHosLogs() throws IllegalArgumentException {
        return new ListHosLogsRequestBuilder();
    }
}
